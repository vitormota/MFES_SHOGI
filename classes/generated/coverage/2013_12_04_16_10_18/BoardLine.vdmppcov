class BoardLine
types
public Player = <White> | <Black>;

instance variables

private line : map nat1 to Cell;
private y : nat1;

inv y in set {1,...,9};
inv card(dom(line)) = 9 and dom(line) = {1,...,9};
operations

public BoardLine: seq of Cell * nat1 ==> BoardLine
BoardLine(cells, yi) == (atomic(y:=yi;
												 line:= {x|->cell | x in set {1,...,9}, cell in set elems(cells) &
																			      cell.x = x });
												)
pre len cells = 9
post forall cell in set elems(cells) & cell.y = yi and yi = y;


public getCell: nat1 ==> Cell 
getCell(r) == return line(r)
pre r in set dom(line)
post line = line~;

public getCells: Player ==> set of Cell
getCells(p) == return { c | c in set rng line & c.piece <> nil and c.piece.belongTo = p };

public getEmptyCells:() ==> set of Cell
getEmptyCells() == return { c | c in set rng line & c.piece = nil };

public getSeqCells: () ==> seq of Cell
getSeqCells() == return getSeqCellsAux(1);

private getSeqCellsAux: nat1 ==> seq of Cell
getSeqCellsAux(x) == 
(
	if x = 9 then return [line(x)]
	else return [line(x)] ^ getSeqCellsAux(x+1); 
)
pre x in set {1,...,9};

end BoardLine