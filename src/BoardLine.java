//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-02 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\FEUP\\4o ano\\1o Semestre\\MFES\\MFES_SHOGI\\MFES_SHOGI\\classes/BoardLine.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class BoardLine implements EvaluatePP {

// ***** VDMTOOLS START Name=line KEEP=NO
  private volatile Map line = new HashMap();
// ***** VDMTOOLS END Name=line

// ***** VDMTOOLS START Name=y KEEP=NO
  private volatile Number y = null;
// ***** VDMTOOLS END Name=y

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardLineSentinel KEEP=NO
  class BoardLineSentinel extends Sentinel {

    public final int getCell = 0;

    public final int getCells = 1;

    public final int BoardLine = 2;

    public final int getSeqCells = 3;

    public final int getEmptyCells = 4;

    public final int getSeqCellsAux = 5;

    public final int nr_functions = 6;


    public BoardLineSentinel () throws CGException {}


    public BoardLineSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardLineSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardLineSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_BoardLine KEEP=NO
  private void vdm_init_BoardLine () {
    try {
      setSentinel();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_BoardLine


// ***** VDMTOOLS START Name=inv_BoardLine KEEP=NO
  public Boolean inv_BoardLine () {
    Boolean rexpr_2 = null;
    Set var2_5 = new HashSet();
    var2_5 = new HashSet();
    for (int count_8 = 1; count_8 <= 9; count_8++) 
      var2_5.add(new Integer(count_8));
    if ((rexpr_2 = Boolean.valueOf(UTIL.Contains(var2_5, y))).booleanValue()) {
      Boolean var2_11 = null;
      if ((var2_11 = Boolean.valueOf(new HashSet(line.keySet()).size() == 9)).booleanValue()) {
        Set var2_20 = new HashSet();
        var2_20 = new HashSet();
        for (int count_23 = 1; count_23 <= 9; count_23++) 
          var2_20.add(new Integer(count_23));
        var2_11 = Boolean.valueOf(UTIL.equals(new HashSet(line.keySet()), var2_20));
      }
      rexpr_2 = var2_11;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=inv_BoardLine


// ***** VDMTOOLS START Name=BoardLine KEEP=NO
  public BoardLine () throws CGException {
    vdm_init_BoardLine();
  }
// ***** VDMTOOLS END Name=BoardLine


// ***** VDMTOOLS START Name=BoardLine#2|List|Number KEEP=NO
  public BoardLine (final List cells, final Number yi) throws CGException {
    vdm_init_BoardLine();
    if (!this.pre_BoardLine(cells, yi).booleanValue()) 
      UTIL.RunTime("Precondition failure in BoardLine");
    y = UTIL.NumberToInt(UTIL.clone(yi));
    Map res_m_5 = new HashMap();
    {
      Set e1_set_10 = new HashSet(cells);
      Set e_set_11 = new HashSet();
      e_set_11 = new HashSet();
      for (int count_14 = 1; count_14 <= 9; count_14++) 
        e_set_11.add(new Integer(count_14));
      Number x = null;
      Cell cell = null;
      Set tmpSet_27 = new HashSet(e_set_11);
      for (Iterator enm_26 = tmpSet_27.iterator(); enm_26.hasNext(); ) {
        Number elem_25 = UTIL.NumberToInt(enm_26.next());
        /* x */
        x = elem_25;
        Set tmpSet_24 = new HashSet(e1_set_10);
        for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
          Cell elem_22 = (Cell)enm_23.next();
          /* cell */
          cell = elem_22;
          if ((cell.x).intValue() == x.intValue()) 
            res_m_5.put(x, cell);
        }
      }
    }
    line = (Map)UTIL.clone(res_m_5);
  }
// ***** VDMTOOLS END Name=BoardLine#2|List|Number


// ***** VDMTOOLS START Name=pre_BoardLine#2|List|Number KEEP=NO
  public Boolean pre_BoardLine (final List cells, final Number yi) throws CGException {
    return Boolean.valueOf(cells.size() == 9);
  }
// ***** VDMTOOLS END Name=pre_BoardLine#2|List|Number


// ***** VDMTOOLS START Name=getCell#1|Number KEEP=NO
  public Cell getCell (final Number r) throws CGException {
    sentinel.entering(((BoardLineSentinel)sentinel).getCell);
    try {
      if (!this.pre_getCell(r).booleanValue()) 
        UTIL.RunTime("Precondition failure in getCell");
      return (Cell)line.get(r);
    }
    finally {
      sentinel.leaving(((BoardLineSentinel)sentinel).getCell);
    }
  }
// ***** VDMTOOLS END Name=getCell#1|Number


// ***** VDMTOOLS START Name=pre_getCell#1|Number KEEP=NO
  public Boolean pre_getCell (final Number r) throws CGException {
    return Boolean.valueOf(line.containsKey(r));
  }
// ***** VDMTOOLS END Name=pre_getCell#1|Number


// ***** VDMTOOLS START Name=getCells#1|Object KEEP=NO
  public Set getCells (final Object p) throws CGException {
    sentinel.entering(((BoardLineSentinel)sentinel).getCells);
    try {
      Set res_s_3 = new HashSet();
      {
        Set e1_set_7 = new HashSet(line.values());
        Cell c = null;
        Set tmpSet_21 = new HashSet(e1_set_7);
        for (Iterator enm_20 = tmpSet_21.iterator(); enm_20.hasNext(); ) {
          Cell elem_19 = (Cell)enm_20.next();
          /* c */
          c = elem_19;
          Boolean pred_8 = null;
          if ((pred_8 = Boolean.valueOf(!UTIL.equals((c.piece), null))).booleanValue()) 
            pred_8 = Boolean.valueOf(UTIL.equals(((c.piece).belongTo), p));
          if (pred_8.booleanValue()) {
            res_s_3.add(c);
          }
        }
      }
      return res_s_3;
    }
    finally {
      sentinel.leaving(((BoardLineSentinel)sentinel).getCells);
    }
  }
// ***** VDMTOOLS END Name=getCells#1|Object


// ***** VDMTOOLS START Name=getEmptyCells KEEP=NO
  public Set getEmptyCells () throws CGException {
    sentinel.entering(((BoardLineSentinel)sentinel).getEmptyCells);
    try {
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(line.values());
        Cell c = null;
        Set tmpSet_14 = new HashSet(e1_set_6);
        for (Iterator enm_13 = tmpSet_14.iterator(); enm_13.hasNext(); ) {
          Cell elem_12 = (Cell)enm_13.next();
          /* c */
          c = elem_12;
          if (UTIL.equals((c.piece), null)) {
            res_s_2.add(c);
          }
        }
      }
      return res_s_2;
    }
    finally {
      sentinel.leaving(((BoardLineSentinel)sentinel).getEmptyCells);
    }
  }
// ***** VDMTOOLS END Name=getEmptyCells


// ***** VDMTOOLS START Name=getSeqCells KEEP=NO
  public List getSeqCells () throws CGException {
    sentinel.entering(((BoardLineSentinel)sentinel).getSeqCells);
    try {
      return getSeqCellsAux(new Integer(1));
    }
    finally {
      sentinel.leaving(((BoardLineSentinel)sentinel).getSeqCells);
    }
  }
// ***** VDMTOOLS END Name=getSeqCells


// ***** VDMTOOLS START Name=getSeqCellsAux#1|Number KEEP=NO
  private List getSeqCellsAux (final Number x) throws CGException {
    sentinel.entering(((BoardLineSentinel)sentinel).getSeqCellsAux);
    try {
      if (!this.pre_getSeqCellsAux(x).booleanValue()) 
        UTIL.RunTime("Precondition failure in getSeqCellsAux");
      if (x.intValue() == 9) {
        List tmpSeq_16 = new ArrayList();
        tmpSeq_16.add((Cell)line.get(x));
        return tmpSeq_16;
      }
      else {
        List rexpr_5 = null;
        List tmpSeq_7 = new ArrayList();
        tmpSeq_7.add((Cell)line.get(x));
        rexpr_5 = new ArrayList(tmpSeq_7);
        rexpr_5.addAll(getSeqCellsAux(new Integer(x.intValue() + 1)));
        return rexpr_5;
      }
    }
    finally {
      sentinel.leaving(((BoardLineSentinel)sentinel).getSeqCellsAux);
    }
  }
// ***** VDMTOOLS END Name=getSeqCellsAux#1|Number


// ***** VDMTOOLS START Name=pre_getSeqCellsAux#1|Number KEEP=NO
  private Boolean pre_getSeqCellsAux (final Number x) throws CGException {
    Set var2_4 = new HashSet();
    var2_4 = new HashSet();
    for (int count_7 = 1; count_7 <= 9; count_7++) 
      var2_4.add(new Integer(count_7));
    return Boolean.valueOf(UTIL.Contains(var2_4, x));
  }
// ***** VDMTOOLS END Name=pre_getSeqCellsAux#1|Number

}
;
